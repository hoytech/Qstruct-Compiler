#!/usr/bin/env perl

use common::sense;

use Getopt::Long;
use Template;
use Digest::SHA;

use Qstruct;
use Qstruct::Compiler;


my @opt_spec = (
  'format=s',
  'output-dir=s',
  'dumper',
);

my $opt = {
  'format' => 'cpp',
};

GetOptions($opt, @opt_spec) || die "GetOptions failed";



my $schema_filename = shift || die "need an input file";

die "malformed format name '$opt->{format}'" unless $opt->{format} =~ /^[-\w]+$/;




open(my $schema_fh, '<', $schema_filename) || die "unable to open schema file '$schema_filename': $!";

my $schema = do { local $/; <$schema_fh> };



my @defs;

Qstruct::parse_schema($schema)->iterate(sub {
  my $def = shift;

  push @defs, $def;

  for(my $i=0; $i < $def->{num_items}; $i++) {
    my $item = Qstruct::Definitions::get_item($def->{def_addr}, $i);
    push @{ $def->{items} }, $item;

    my $type_raw = $item->{type_raw} = $item->{type};
    ($item->{type}, $item->{width}) = Qstruct::type_lookup($item->{type_raw});

    $item->{is_unsigned} = !!($type_raw & (1<<16));
    $item->{is_array_fix} = !!($type_raw & (1<<17));
    $item->{is_array_dyn} = !!($type_raw & (1<<18));
  }
});



foreach my $def (@defs) {
  @{ $def->{items} } = sort { $a->{order} <=> $b->{order} }
                            @{ $def->{items} };
}



if ($opt->{dumper}) {
  require Data::Dumper;
  print STDERR Data::Dumper::Dumper(\@defs);
  exit;
}



eval "require Qstruct::Compiler::Formats::$opt->{format}";
die "unknown format: $opt->{format}" if $@;

my $template = do {
  no strict 'refs';
  ${"Qstruct::Compiler::Formats::$opt->{format}::template"}
};

my $tt = Template->new({ ABSOLUTE => 1, });


my $context = {
  schema_filename => $schema_filename,
  schema_sha1 => Digest::SHA::sha1_hex($schema),
  qstruct_compiler_version => $Qstruct::Compiler::VERSION,
  defs => \@defs,
};


$tt->process(\$template, $context, \*STDOUT)
    || die "Template toolkit error: " . $tt->error();
